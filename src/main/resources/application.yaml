server:
  port: 8085

spring:
  application:
    name: api-gateway

  data:
    redis:
      host: localhost
      port: 6379

  cloud:
    gateway:
      server:
        webflux:
          httpclient:
            connect-timeout: 10000
            response-timeout: 10s
      # Rate Limiter Configuration
      # Default properties for RequestRateLimiter
      # You can override these per route
      default-filters:
        - name: RequestRateLimiter
          args:
            # The bean name of the KeyResolver to use (defined in RateLimiterConfig.java)
            # key-resolver: '#userKeyResolver' # Use the user's principal name for rate limiting
            key-resolver: '#ipKeyResolver' # Alternatively, use the client's IP address
            # replenishRate: How many requests per second can be allowed without dropping any.
            # This is the rate at which tokens are added to the bucket.
            replenishRate: 0
            # burstCapacity: The maximum number of requests a user can make in a short period.
            # This is the maximum capacity of the token bucket.
            burstCapacity: 1
            # requestedTokens: (Optional) How many tokens to consume per request. Default is 1.
            # requestedTokens: 1

resilience4j:
  timelimiter:
    instances:
      default:
        timeoutDuration: 5s
      unison-CB:
        timeoutDuration: 5s
  circuitbreaker:
    instances:
      default:
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
      unison-CB:
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s

logging:
  level:
    io.github.resilience4j: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.security: DEBUG
    org.springframework.data.redis: TRACE
    io.lettuce.core: TRACE

fallback-messages:
  timeout: "Service '%s' timed out. Please try again later."
  circuit-open: "Service '%s' circuit is open. We are working to restore it."
  not-found: "Service '%s' could not be reached or found."
  connection-refused: "Service '%s' is currently unavailable or may be down."
  unknown: "Service '%s' failed due to an unexpected error."

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    hostname: localhost
#    prefer-ip-address: true
#    ip-address: 127.0.0.1
#    instance-id: ${spring.application.name}:${server.port}

jwt:
  secret: "thisisaverylongandsecuresecretkeyforjwtauthenticationtesting"
